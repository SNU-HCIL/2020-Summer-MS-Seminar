"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformer = void 0;
const postcss_1 = __importDefault(require("postcss"));
const process = async ({ plugins, parser, syntax }, content, filename, sourceMap) => {
    const { css, map, messages } = await postcss_1.default(plugins).process(content, {
        from: filename,
        map: { prev: sourceMap },
        parser,
        syntax,
    });
    const dependencies = messages.reduce((acc, msg) => {
        // istanbul ignore if
        if (msg.type !== 'dependency')
            return acc;
        acc.push(msg.file);
        return acc;
    }, []);
    return { code: css, map, dependencies };
};
/** Adapted from https://github.com/TehShrike/svelte-preprocess-postcss */
const transformer = async ({ content, filename, options, map, }) => {
    if (options && Array.isArray(options.plugins)) {
        return process(options, content, filename, map);
    }
    try {
        /** If not, look for a postcss config file */
        const { default: postcssLoadConfig } = await Promise.resolve().then(() => __importStar(require(`postcss-load-config`)));
        const loadedConfig = await postcssLoadConfig(options, options ? options.configFilePath : undefined);
        options = {
            plugins: loadedConfig.plugins,
            // `postcss-load-config` puts all other props in a `options` object
            ...loadedConfig.options,
        };
    }
    catch (e) {
        /** Something went wrong, do nothing */
        // istanbul ignore next
        if (e.code === 'MODULE_NOT_FOUND') {
            console.error(`[svelte-preprocess] PostCSS configuration was not passed. If you expect to load it from a file, make sure to install "postcss-load-config" and try again ʕ•ᴥ•ʔ`);
        }
        else {
            console.error(e);
        }
        return { code: content, map, dependencies: [] };
    }
    return process(options, content, filename, map);
};
exports.transformer = transformer;
