"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MachineFriendlyWriter = exports.HumanFriendlyWriter = void 0;
const chalk = require("chalk");
const path_1 = require("path");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const svelte_language_server_1 = require("svelte-language-server");
class HumanFriendlyWriter {
    constructor(stream, isVerbose = true) {
        this.stream = stream;
        this.isVerbose = isVerbose;
    }
    start(workspaceDir) {
        if (this.isVerbose) {
            this.stream.write('\n');
            this.stream.write(`Loading svelte-check in workspace: ${workspaceDir}`);
            this.stream.write('\n');
            this.stream.write('Getting Svelte diagnostics...\n');
            this.stream.write('====================================\n');
            this.stream.write('\n');
        }
    }
    file(diagnostics, workspaceDir, filename, text) {
        diagnostics.forEach((diagnostic) => {
            const source = diagnostic.source ? `(${diagnostic.source})` : '';
            // Display location in a format that IDEs will turn into file links
            const { line, character } = diagnostic.range.start;
            // eslint-disable-next-line max-len
            this.stream.write(`${workspaceDir}${path_1.sep}${chalk.green(filename)}:${line + 1}:${character + 1}\n`);
            // Show some context around diagnostic range
            const startOffset = svelte_language_server_1.offsetAt(diagnostic.range.start, text);
            const endOffset = svelte_language_server_1.offsetAt(diagnostic.range.end, text);
            const codePrev = chalk.cyan(text.substring(Math.max(startOffset - 10, 0), startOffset));
            const codeHighlight = chalk.magenta(text.substring(startOffset, endOffset));
            const codePost = chalk.cyan(text.substring(endOffset, endOffset + 10));
            const code = codePrev + codeHighlight + codePost;
            let msg;
            if (this.isVerbose) {
                msg = `${diagnostic.message} ${source}\n${chalk.cyan(code)}`;
            }
            else {
                msg = `${diagnostic.message} ${source}`;
            }
            if (diagnostic.severity === vscode_languageserver_protocol_1.DiagnosticSeverity.Error) {
                this.stream.write(`${chalk.red('Error')}: ${msg}\n`);
            }
            else {
                this.stream.write(`${chalk.yellow('Warn')}: ${msg}\n`);
            }
            this.stream.write("\n");
        });
    }
    completion(_f, err, _w) {
        this.stream.write('====================================\n');
        if (err === 0) {
            this.stream.write(chalk.green(`svelte-check found no errors\n`));
        }
        else {
            this.stream.write(chalk.red(`svelte-check found ${err} ${err === 1 ? 'error' : 'errors'}\n`));
        }
    }
    failure(err) {
        this.stream.write(`${err}\n`);
    }
}
exports.HumanFriendlyWriter = HumanFriendlyWriter;
class MachineFriendlyWriter {
    constructor(stream) {
        this.stream = stream;
    }
    log(msg) {
        this.stream.write(`${new Date().getTime()} ${msg}\n`);
    }
    start(workspaceDir) {
        this.log(`START ${JSON.stringify(workspaceDir)}`);
    }
    file(diagnostics, workspaceDir, filename, _text) {
        diagnostics.forEach((d) => {
            const { message, severity, range } = d;
            const type = severity === vscode_languageserver_protocol_1.DiagnosticSeverity.Error ? "ERROR" :
                severity === vscode_languageserver_protocol_1.DiagnosticSeverity.Warning ? "WARNING" :
                    null;
            if (type) {
                const { line, character } = range.start;
                const fn = JSON.stringify(filename);
                const msg = JSON.stringify(message);
                this.log(`${type} ${fn} ${line + 1}:${character + 1} ${msg}`);
            }
        });
    }
    completion(fileCount, errorCount, warningCount) {
        this.log(`COMPLETED ${fileCount} FILES ${errorCount} ERRORS ${warningCount} WARNINGS`);
    }
    failure(err) {
        this.log(`FAILURE ${JSON.stringify(err.message)}`);
    }
}
exports.MachineFriendlyWriter = MachineFriendlyWriter;
