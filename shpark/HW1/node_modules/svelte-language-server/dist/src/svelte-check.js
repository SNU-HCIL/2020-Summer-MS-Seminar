"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SvelteCheck = void 0;
const documents_1 = require("./lib/documents");
const ls_config_1 = require("./ls-config");
const plugins_1 = require("./plugins");
const logger_1 = require("./logger");
/**
 * Small wrapper around PluginHost's Diagnostic Capabilities
 * for svelte-check, without the overhead of the lsp.
 */
class SvelteCheck {
    constructor(workspacePath) {
        this.docManager = new documents_1.DocumentManager((textDocument) => new documents_1.Document(textDocument.uri, textDocument.text));
        this.configManager = new ls_config_1.LSConfigManager();
        this.pluginHost = new plugins_1.PluginHost(this.docManager, this.configManager);
        logger_1.Logger.setLogErrorsOnly(true);
        this.initialize(workspacePath);
    }
    initialize(workspacePath) {
        this.pluginHost.register(new plugins_1.SveltePlugin(this.configManager, {}));
        this.pluginHost.register(new plugins_1.HTMLPlugin(this.docManager, this.configManager));
        this.pluginHost.register(new plugins_1.CSSPlugin(this.docManager, this.configManager));
        this.pluginHost.register(new plugins_1.TypeScriptPlugin(this.docManager, this.configManager, workspacePath));
    }
    /**
     * Gets diagnostics for a svelte file.
     *
     * @param params Text and Uri of a svelte file
     */
    async getDiagnostics(params) {
        this.docManager.openDocument({
            languageId: 'svelte',
            text: params.text,
            uri: params.uri,
            version: 1,
        });
        return await this.pluginHost.getDiagnostics({ uri: params.uri });
    }
}
exports.SvelteCheck = SvelteCheck;
//# sourceMappingURL=svelte-check.js.map