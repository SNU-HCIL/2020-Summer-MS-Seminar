"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lsConfig = exports.LSConfigManager = void 0;
const lodash_1 = require("lodash");
/**
 * Default config for the language server.
 */
const defaultLSConfig = {
    typescript: {
        enable: true,
        diagnostics: { enable: true },
        hover: { enable: true },
        completions: { enable: true },
        definitions: { enable: true },
        documentSymbols: { enable: true },
        codeActions: { enable: true },
        rename: { enable: true },
    },
    css: {
        enable: true,
        diagnostics: { enable: true },
        hover: { enable: true },
        completions: { enable: true },
        documentColors: { enable: true },
        colorPresentations: { enable: true },
        documentSymbols: { enable: true },
    },
    html: {
        enable: true,
        hover: { enable: true },
        completions: { enable: true },
        tagComplete: { enable: true },
        documentSymbols: { enable: true },
    },
    svelte: {
        enable: true,
        diagnostics: { enable: true },
        format: { enable: true },
        completions: { enable: true },
        hover: { enable: true },
        codeActions: { enable: true },
    },
};
class LSConfigManager {
    constructor() {
        this.config = defaultLSConfig;
    }
    /**
     * Updates config.
     */
    update(config) {
        // Ideally we shouldn't need the merge here because all updates should be valid and complete configs.
        // But since those configs come from the client they might be out of synch with the valid config:
        // We might at some point in the future forget to synch config settings in all packages after updating the config.
        this.config = lodash_1.merge({}, defaultLSConfig, this.config, config);
    }
    /**
     * Whether or not specified config is enabled
     * @param key a string which is a path. Example: 'svelte.diagnostics.enable'.
     */
    enabled(key) {
        return !!lodash_1.get(this.config, key);
    }
}
exports.LSConfigManager = LSConfigManager;
exports.lsConfig = new LSConfigManager();
//# sourceMappingURL=ls-config.js.map