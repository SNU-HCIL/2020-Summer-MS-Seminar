import { CodeAction, CodeActionContext, Color, ColorInformation, ColorPresentation, CompletionList, DefinitionLink, Diagnostic, Hover, Position, Range, SymbolInformation, TextDocumentIdentifier, TextEdit, FileChangeType, CompletionItem, CompletionContext, WorkspaceEdit } from 'vscode-languageserver';
import { LSConfig, LSConfigManager } from '../ls-config';
import { DocumentManager } from '../lib/documents';
import { LSProvider, Plugin, OnWatchFileChanges, AppCompletionItem, FileRename } from './interfaces';
export declare class PluginHost implements LSProvider, OnWatchFileChanges {
    private documentsManager;
    private config;
    private filterIncompleteCompletions;
    private plugins;
    constructor(documentsManager: DocumentManager, config: LSConfigManager);
    initialize(dontFilterIncompleteCompletions: boolean): void;
    register(plugin: Plugin): void;
    updateConfig(config: LSConfig): void;
    getDiagnostics(textDocument: TextDocumentIdentifier): Promise<Diagnostic[]>;
    doHover(textDocument: TextDocumentIdentifier, position: Position): Promise<Hover | null>;
    getCompletions(textDocument: TextDocumentIdentifier, position: Position, completionContext?: CompletionContext): Promise<CompletionList>;
    resolveCompletion(textDocument: TextDocumentIdentifier, completionItem: AppCompletionItem): Promise<CompletionItem>;
    formatDocument(textDocument: TextDocumentIdentifier): Promise<TextEdit[]>;
    doTagComplete(textDocument: TextDocumentIdentifier, position: Position): Promise<string | null>;
    getDocumentColors(textDocument: TextDocumentIdentifier): Promise<ColorInformation[]>;
    getColorPresentations(textDocument: TextDocumentIdentifier, range: Range, color: Color): Promise<ColorPresentation[]>;
    getDocumentSymbols(textDocument: TextDocumentIdentifier): Promise<SymbolInformation[]>;
    getDefinitions(textDocument: TextDocumentIdentifier, position: Position): Promise<DefinitionLink[]>;
    getCodeActions(textDocument: TextDocumentIdentifier, range: Range, context: CodeActionContext): Promise<CodeAction[]>;
    executeCommand(textDocument: TextDocumentIdentifier, command: string, args?: any[]): Promise<WorkspaceEdit | string | null>;
    updateImports(fileRename: FileRename): Promise<WorkspaceEdit | null>;
    prepareRename(textDocument: TextDocumentIdentifier, position: Position): Promise<Range | null>;
    rename(textDocument: TextDocumentIdentifier, position: Position, newName: string): Promise<WorkspaceEdit | null>;
    onWatchFileChanges(fileName: string, changeType: FileChangeType): void;
    private getDocument;
    private execute;
    private tryExecutePlugin;
}
