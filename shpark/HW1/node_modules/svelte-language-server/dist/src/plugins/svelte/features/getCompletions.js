"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompletions = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const SvelteTags_1 = require("./SvelteTags");
const documents_1 = require("../../../lib/documents");
/**
 * Get completions for special svelte tags within moustache tags.
 */
function getCompletions(svelteDoc, position) {
    const offset = svelteDoc.offsetAt(position);
    const isInStyleOrScript = documents_1.isInTag(position, svelteDoc.style) ||
        documents_1.isInTag(position, svelteDoc.script) ||
        documents_1.isInTag(position, svelteDoc.moduleScript);
    const lastCharactersBeforePosition = svelteDoc
        .getText()
        // use last 10 characters, should cover 99% of all cases
        .substr(Math.max(offset - 10, 0), Math.min(offset, 10));
    const notPreceededByOpeningBracket = !/[\s\S]*{\s*[#:/@]\w*$/.test(lastCharactersBeforePosition);
    if (isInStyleOrScript || notPreceededByOpeningBracket) {
        return null;
    }
    const triggerCharacter = getTriggerCharacter(lastCharactersBeforePosition);
    // return all, filtering with regards to user input will be done client side
    return getCompletionsWithRegardToTriggerCharacter(triggerCharacter, svelteDoc, offset);
}
exports.getCompletions = getCompletions;
/**
 * Get completions with regard to trigger character.
 */
function getCompletionsWithRegardToTriggerCharacter(triggerCharacter, svelteDoc, offset) {
    if (triggerCharacter === '@') {
        return createCompletionItems([
            { tag: 'html', label: 'html' },
            { tag: 'debug', label: 'debug' },
        ]);
    }
    if (triggerCharacter === '#') {
        return createCompletionItems([
            { tag: 'if', label: 'if' },
            { tag: 'each', label: 'each' },
            { tag: 'await', label: 'await' },
        ]);
    }
    if (triggerCharacter === ':') {
        return showCompletionWithRegardsToOpenedTags({
            awaitOpen: createCompletionItems([
                { tag: 'await', label: 'then' },
                { tag: 'await', label: 'catch' },
            ]),
            eachOpen: createCompletionItems([{ tag: 'each', label: 'else' }]),
            ifOpen: createCompletionItems([
                { tag: 'if', label: 'else' },
                { tag: 'if', label: 'else if' },
            ]),
        }, svelteDoc, offset);
    }
    if (triggerCharacter === '/') {
        return showCompletionWithRegardsToOpenedTags({
            awaitOpen: createCompletionItems([{ tag: 'await', label: 'await' }]),
            eachOpen: createCompletionItems([{ tag: 'each', label: 'each' }]),
            ifOpen: createCompletionItems([{ tag: 'if', label: 'if' }]),
        }, svelteDoc, offset);
    }
    return null;
}
/**
 * Get trigger character in front of current position.
 */
function getTriggerCharacter(content) {
    const chars = [
        getLastIndexOf('#'),
        getLastIndexOf('/'),
        getLastIndexOf(':'),
        getLastIndexOf('@'),
    ];
    return chars.sort((c1, c2) => c2.idx - c1.idx)[0].char;
    function getLastIndexOf(char) {
        return { char, idx: content.lastIndexOf(char) };
    }
}
/**
 * Return completions with regards to last opened tag.
 */
function showCompletionWithRegardsToOpenedTags(on, svelteDoc, offset) {
    switch (SvelteTags_1.getLatestOpeningTag(svelteDoc, offset)) {
        case 'each':
            return on.eachOpen;
        case 'if':
            return on.ifOpen;
        case 'await':
            return on.awaitOpen;
        default:
            return null;
    }
}
/**
 * Create the completion items for given labels and tags.
 */
function createCompletionItems(items) {
    return vscode_languageserver_1.CompletionList.create(
    // add sortText/preselect so it is ranked higher than other completions and selected first
    items.map((item) => ({
        label: item.label,
        sortText: '-1',
        kind: vscode_languageserver_1.CompletionItemKind.Keyword,
        preselect: true,
        documentation: {
            kind: 'markdown',
            value: SvelteTags_1.documentation[item.tag],
        },
    })));
}
//# sourceMappingURL=getCompletions.js.map