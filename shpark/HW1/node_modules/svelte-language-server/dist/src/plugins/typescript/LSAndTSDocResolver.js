"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LSAndTSDocResolver = void 0;
const utils_1 = require("../../utils");
const DocumentSnapshot_1 = require("./DocumentSnapshot");
const service_1 = require("./service");
class LSAndTSDocResolver {
    constructor(docManager, workspacePath) {
        this.docManager = docManager;
        this.workspacePath = workspacePath;
        /**
         * Create a svelte document -> should only be invoked with svelte files.
         */
        this.createDocument = (fileName, content) => {
            const uri = utils_1.pathToUrl(fileName);
            const document = this.docManager.openDocument({
                languageId: 'svelte',
                text: content,
                uri,
                version: 0,
            });
            this.docManager.lockDocument(uri);
            return document;
        };
        docManager.on('documentChange', utils_1.debounceSameArg(async (document) => {
            // This refreshes the document in the ts language service
            this.getLSAndTSDoc(document);
        }, (newDoc, prevDoc) => newDoc.uri === (prevDoc === null || prevDoc === void 0 ? void 0 : prevDoc.uri), 1000));
    }
    getLSForPath(path) {
        return service_1.getLanguageServiceForPath(path, this.workspacePath, this.createDocument);
    }
    getLSAndTSDoc(document) {
        const lang = service_1.getLanguageServiceForDocument(document, this.workspacePath, this.createDocument);
        const filePath = document.getFilePath();
        const tsDoc = this.getSnapshot(filePath, document);
        return { tsDoc, lang };
    }
    getSnapshot(filePath, document) {
        const tsService = this.getTSService(filePath);
        const { snapshotManager } = tsService;
        let tsDoc = snapshotManager.get(filePath);
        if (!tsDoc) {
            const options = { strictMode: !!tsService.compilerOptions.strict };
            tsDoc = document
                ? DocumentSnapshot_1.DocumentSnapshot.fromDocument(document, options)
                : DocumentSnapshot_1.DocumentSnapshot.fromFilePath(filePath, options);
            snapshotManager.set(filePath, tsDoc);
        }
        return tsDoc;
    }
    updateSnapshotPath(oldPath, newPath) {
        this.deleteSnapshot(oldPath);
        return this.getSnapshot(newPath);
    }
    deleteSnapshot(filePath) {
        this.getTSService(filePath).deleteDocument(filePath);
        this.docManager.releaseDocument(utils_1.pathToUrl(filePath));
    }
    getSnapshotManager(filePath) {
        return this.getTSService(filePath).snapshotManager;
    }
    getTSService(filePath) {
        return service_1.getService(filePath, this.workspacePath, this.createDocument);
    }
}
exports.LSAndTSDocResolver = LSAndTSDocResolver;
//# sourceMappingURL=LSAndTSDocResolver.js.map