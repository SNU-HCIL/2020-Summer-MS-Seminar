"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompletionsProviderImpl = void 0;
const typescript_1 = __importDefault(require("typescript"));
const vscode_languageserver_1 = require("vscode-languageserver");
const documents_1 = require("../../../lib/documents");
const utils_1 = require("../../../utils");
const utils_2 = require("../utils");
class CompletionsProviderImpl {
    constructor(lsAndTsDocResovler) {
        this.lsAndTsDocResovler = lsAndTsDocResovler;
        /**
         * The language service throws an error if the character is not a valid trigger character.
         * Also, the completions are worse.
         * Therefore, only use the characters the typescript compiler treats as valid.
         */
        this.validTriggerCharacters = ['.', '"', "'", '`', '/', '@', '<', '#'];
    }
    isValidTriggerCharacter(character) {
        return this.validTriggerCharacters.includes(character);
    }
    async getCompletions(document, position, completionContext) {
        if (documents_1.isInTag(position, document.styleInfo)) {
            return null;
        }
        const { lang, tsDoc } = this.lsAndTsDocResovler.getLSAndTSDoc(document);
        const filePath = tsDoc.filePath;
        if (!filePath) {
            return null;
        }
        const triggerCharacter = completionContext === null || completionContext === void 0 ? void 0 : completionContext.triggerCharacter;
        const triggerKind = completionContext === null || completionContext === void 0 ? void 0 : completionContext.triggerKind;
        const validTriggerCharacter = this.isValidTriggerCharacter(triggerCharacter)
            ? triggerCharacter
            : undefined;
        const isCustomTriggerCharacter = triggerKind === vscode_languageserver_1.CompletionTriggerKind.TriggerCharacter;
        // ignore any custom trigger character specified in server capabilities
        //  and is not allow by ts
        if (isCustomTriggerCharacter && !validTriggerCharacter) {
            return null;
        }
        const fragment = await tsDoc.getFragment();
        if (!fragment.isInGenerated(position)) {
            return null;
        }
        const offset = fragment.offsetAt(fragment.getGeneratedPosition(position));
        const completions = lang.getCompletionsAtPosition(filePath, offset, {
            includeCompletionsForModuleExports: true,
            triggerCharacter: validTriggerCharacter,
        });
        if (!completions) {
            return tsDoc.parserError ? vscode_languageserver_1.CompletionList.create([], true) : null;
        }
        const completionItems = completions.entries
            .map((comp) => this.toCompletionItem(fragment, comp, utils_1.pathToUrl(tsDoc.filePath), position))
            .filter(utils_1.isNotNullOrUndefined)
            .map((comp) => documents_1.mapCompletionItemToOriginal(fragment, comp));
        return vscode_languageserver_1.CompletionList.create(completionItems, !!tsDoc.parserError);
    }
    toCompletionItem(fragment, comp, uri, position) {
        const completionLabelAndInsert = this.getCompletionLabelAndInsert(fragment, comp);
        if (!completionLabelAndInsert) {
            return null;
        }
        const { label, insertText, isSvelteComp } = completionLabelAndInsert;
        return {
            label,
            insertText,
            kind: utils_2.scriptElementKindToCompletionItemKind(comp.kind),
            commitCharacters: utils_2.getCommitCharactersForScriptElement(comp.kind),
            // Make sure svelte component takes precedence
            sortText: isSvelteComp ? '-1' : comp.sortText,
            preselect: isSvelteComp ? true : comp.isRecommended,
            // pass essential data for resolving completion
            data: {
                ...comp,
                uri,
                position,
            },
        };
    }
    getCompletionLabelAndInsert(fragment, comp) {
        let { kind, kindModifiers, name, source } = comp;
        const isScriptElement = kind === typescript_1.default.ScriptElementKind.scriptElement;
        const hasModifier = Boolean(comp.kindModifiers);
        const isSvelteComp = this.isSvelteComponentImport(name);
        if (isSvelteComp) {
            name = this.changeSvelteComponentName(name);
            if (this.isExistingSvelteComponentImport(fragment, name, source)) {
                return null;
            }
        }
        if (isScriptElement && hasModifier) {
            return {
                insertText: name,
                label: name + kindModifiers,
                isSvelteComp,
            };
        }
        return {
            label: name,
            isSvelteComp,
        };
    }
    isExistingSvelteComponentImport(fragment, name, source) {
        const importStatement = new RegExp(`import ${name} from ["'\`][\\s\\S]+\\.svelte["'\`]`);
        return !!source && !!fragment.text.match(importStatement);
    }
    async resolveCompletion(document, completionItem) {
        const { data: comp } = completionItem;
        const { tsDoc, lang } = this.lsAndTsDocResovler.getLSAndTSDoc(document);
        const filePath = tsDoc.filePath;
        if (!comp || !filePath) {
            return completionItem;
        }
        const fragment = await tsDoc.getFragment();
        const detail = lang.getCompletionEntryDetails(filePath, fragment.offsetAt(fragment.getGeneratedPosition(comp.position)), comp.name, {}, comp.source, {});
        if (detail) {
            const { detail: itemDetail, documentation: itemDocumentation, } = this.getCompletionDocument(detail);
            completionItem.detail = itemDetail;
            completionItem.documentation = itemDocumentation;
        }
        const actions = detail === null || detail === void 0 ? void 0 : detail.codeActions;
        const isImport = !!(detail === null || detail === void 0 ? void 0 : detail.source);
        if (actions) {
            const edit = [];
            for (const action of actions) {
                for (const change of action.changes) {
                    edit.push(...this.codeActionChangesToTextEdit(document, fragment, change, isImport));
                }
            }
            completionItem.additionalTextEdits = edit;
        }
        return completionItem;
    }
    getCompletionDocument(compDetail) {
        const { source, documentation: tsDocumentation, displayParts } = compDetail;
        let detail = this.changeSvelteComponentName(typescript_1.default.displayPartsToString(displayParts));
        if (source) {
            const importPath = typescript_1.default.displayPartsToString(source);
            detail = `Auto import from ${importPath}\n${detail}`;
        }
        const documentation = tsDocumentation
            ? typescript_1.default.displayPartsToString(tsDocumentation)
            : undefined;
        return {
            documentation,
            detail,
        };
    }
    codeActionChangesToTextEdit(doc, fragment, changes, isImport) {
        return changes.textChanges.map((change) => this.codeActionChangeToTextEdit(doc, fragment, change, isImport));
    }
    codeActionChangeToTextEdit(doc, fragment, change, isImport) {
        change.newText = this.changeSvelteComponentName(change.newText);
        const scriptTagInfo = fragment.scriptInfo;
        if (!scriptTagInfo) {
            // no script tag defined yet, add it.
            return vscode_languageserver_1.TextEdit.replace(beginOfDocumentRange, `<script>${typescript_1.default.sys.newLine}${change.newText}</script>${typescript_1.default.sys.newLine}`);
        }
        const { span } = change;
        const virutalRange = utils_2.convertRange(fragment, span);
        let range;
        const isNewImport = isImport && virutalRange.start.character === 0;
        // Since new import always can't be mapped, we'll have special treatment here
        //  but only hack this when there is multiple line in script
        if (isNewImport && virutalRange.start.line > 1) {
            range = this.mapRangeForNewImport(fragment, virutalRange);
        }
        else {
            range = documents_1.mapRangeToOriginal(fragment, virutalRange);
        }
        // If range is somehow not mapped in parent,
        // the import is mapped wrong or is outside script tag,
        // use script starting point instead.
        // This happens among other things if the completion is the first import of the file.
        if (range.start.line === -1 ||
            (range.start.line === 0 && range.start.character <= 1 && span.length === 0) ||
            doc.offsetAt(range.start) > scriptTagInfo.end) {
            range = utils_2.convertRange(doc, {
                start: scriptTagInfo.start,
                length: span.length,
            });
        }
        // prevent newText from being placed like this: <script>import {} from ''
        if (range.start.line === 0) {
            change.newText = typescript_1.default.sys.newLine + change.newText;
        }
        return vscode_languageserver_1.TextEdit.replace(range, change.newText);
    }
    mapRangeForNewImport(fragment, virtualRange) {
        const sourceMapableRange = this.offsetLinesAndMovetoStartOfLine(virtualRange, -1);
        const mappableRange = documents_1.mapRangeToOriginal(fragment, sourceMapableRange);
        return this.offsetLinesAndMovetoStartOfLine(mappableRange, 1);
    }
    offsetLinesAndMovetoStartOfLine({ start, end }, offsetLines) {
        return vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(start.line + offsetLines, 0), vscode_languageserver_1.Position.create(end.line + offsetLines, 0));
    }
    isSvelteComponentImport(className) {
        return className.endsWith('__SvelteComponent_');
    }
    changeSvelteComponentName(name) {
        return name.replace(/(\w+)__SvelteComponent_/, '$1');
    }
}
exports.CompletionsProviderImpl = CompletionsProviderImpl;
const beginOfDocumentRange = vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(0, 0), vscode_languageserver_1.Position.create(0, 0));
//# sourceMappingURL=CompletionProvider.js.map