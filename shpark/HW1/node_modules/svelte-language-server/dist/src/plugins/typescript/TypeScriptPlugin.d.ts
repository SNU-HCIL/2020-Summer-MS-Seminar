import { CodeAction, CodeActionContext, CompletionContext, DefinitionLink, Diagnostic, FileChangeType, Hover, Position, Range, SymbolInformation, WorkspaceEdit } from 'vscode-languageserver';
import { Document, DocumentManager } from '../../lib/documents';
import { LSConfigManager } from '../../ls-config';
import { AppCompletionItem, AppCompletionList, CodeActionsProvider, CompletionsProvider, DefinitionsProvider, DiagnosticsProvider, DocumentSymbolsProvider, FileRename, HoverProvider, OnWatchFileChanges, RenameProvider, UpdateImportsProvider } from '../interfaces';
import { CompletionEntryWithIdentifer } from './features/CompletionProvider';
export declare class TypeScriptPlugin implements DiagnosticsProvider, HoverProvider, DocumentSymbolsProvider, DefinitionsProvider, CodeActionsProvider, UpdateImportsProvider, RenameProvider, OnWatchFileChanges, CompletionsProvider<CompletionEntryWithIdentifer> {
    private readonly configManager;
    private readonly lsAndTsDocResolver;
    private readonly completionProvider;
    private readonly codeActionsProvider;
    private readonly updateImportsProvider;
    private readonly diagnosticsProvider;
    private readonly renameProvider;
    constructor(docManager: DocumentManager, configManager: LSConfigManager, workspacePath: string);
    getDiagnostics(document: Document): Promise<Diagnostic[]>;
    doHover(document: Document, position: Position): Promise<Hover | null>;
    getDocumentSymbols(document: Document): Promise<SymbolInformation[]>;
    getCompletions(document: Document, position: Position, completionContext?: CompletionContext): Promise<AppCompletionList<CompletionEntryWithIdentifer> | null>;
    resolveCompletion(document: Document, completionItem: AppCompletionItem<CompletionEntryWithIdentifer>): Promise<AppCompletionItem<CompletionEntryWithIdentifer>>;
    getDefinitions(document: Document, position: Position): Promise<DefinitionLink[]>;
    prepareRename(document: Document, position: Position): Promise<Range | null>;
    rename(document: Document, position: Position, newName: string): Promise<WorkspaceEdit | null>;
    getCodeActions(document: Document, range: Range, context: CodeActionContext): Promise<CodeAction[]>;
    executeCommand(document: Document, command: string, args?: any[]): Promise<WorkspaceEdit | null>;
    updateImports(fileRename: FileRename): Promise<WorkspaceEdit | null>;
    onWatchFileChanges(fileName: string, changeType: FileChangeType): void;
    private getLSAndTSDoc;
    private getSnapshot;
    /**
     *
     * @internal
     */
    getSnapshotManager(fileName: string): import("./SnapshotManager").SnapshotManager;
    private featureEnabled;
}
