import { Position, Range } from 'vscode-languageserver';
export declare function clamp(num: number, min: number, max: number): number;
export declare function urlToPath(stringUrl: string): string | null;
export declare function pathToUrl(path: string): string;
export declare function flatten<T>(arr: T[][]): T[];
export declare function isInRange(range: Range, positionToTest: Position): boolean;
export declare function isBeforeOrEqualToPosition(position: Position, positionToTest: Position): boolean;
export declare function isNotNullOrUndefined<T>(val: T | undefined | null): val is T;
/**
 * Debounces a function but cancels previous invocation only if
 * a second function determines it should.
 *
 * @param fn The function with it's argument
 * @param determineIfSame The function which determines if the previous invocation should be canceld or not
 * @param miliseconds Number of miliseconds to debounce
 */
export declare function debounceSameArg<T>(fn: (arg: T) => void, shouldCancelPrevious: (newArg: T, prevArg?: T) => boolean, miliseconds: number): (arg: T) => void;
/**
 * Like str.lastIndexOf, but for regular expressions. Note that you need to provide the g-flag to your RegExp!
 */
export declare function regexLastIndexOf(text: string, regex: RegExp, endPos?: number): number;
