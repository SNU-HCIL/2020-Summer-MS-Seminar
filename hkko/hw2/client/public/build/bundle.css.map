{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script> \nimport { fade } from 'svelte/transition';\n\nlet board = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]];\nlet turn = 'X';\nlet checked = [[false, false, false], [false, false, false], [false, false, false],];\nlet win = null;\nlet boards = [];\n\nfunction onclick(rowIndex, colIndex) {\n    if(win === null) {\n        if(!checked[rowIndex][colIndex]) {\n            board[rowIndex][colIndex] = turn;\n            let board_hist = [rowIndex, colIndex, turn]\n            turn = turn === 'X' ? 'O' : 'X';\n            checked[rowIndex][colIndex] = true;\n            boards.push(board_hist);\n\n            for (let i = 0; i < lines.length; i++) {\n                let result = [\"\", \"\", \"\"];\n                for (let j = 0; j < 3; j++) {\n                    let first = parseInt(lines[i][j] / 3);\n                    let second = lines[i][j] % 3\n                    result[j] = board[first][second];\n                }\n                if (result[0] && result[0] === result[1] && result[0] === result[2]) {\n                    win = result[0];\n                }\n            }\n        }\n    }\n}\n\nfunction restart() {\n    win = null;\n    board = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]];\n    turn = 'X'\n    boards = [];\n    checked = [[false, false, false], [false, false, false], [false, false, false],];\n}\n\nconst lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n];\n\nfunction backToHistory() {\n    if (boards.length > 0) {\n        if (win == null) {\n            let last = boards.length;\n            board[boards[last-1][0]][boards[last-1][1]] = \"\";\n            checked[boards[last-1][0]][boards[last-1][1]] = false;\n            boards.pop();\n            turn = turn === 'X' ? 'O' : 'X';\n        }\n    }\n}\n\nfunction twirl(node, params) {\n    return {\n        duration: params.duration,\n        css: t => {\n            const color = `background: rgb(0, 256, ${t*256});`;\n            return color + `transform: scale(${(t-.5)*100}) rotate(${t*120}deg);`\n        }\n    }\n}\n\n</script>\n\n<style>\ntable {\n    width: 100%;\n    max-width: 800px;\n    border-collapse: collapse;\n    font-size: 12em;\n    }\ntd {\n    border: 1px solid;\n    text-align: center;\n    height: 1.2em;\n    width: 1.2em;\n}\n</style>\n\n<h2>Let's play Tic Tac Toe!</h2>\n\n<button on:click={() =>restart()}>Restart the game!</button>\n\n<table>\n    <tbody>\n        {#each board as row, rowIndex}\n            <tr>\n                {#each row as col, colIndex}\n                    <td on:click={() => onclick(rowIndex, colIndex)}>\n                    {#if checked[rowIndex][colIndex]}\n                        <div transition:fade>\n                            {col}\n                        </div>\n                    {/if}\n                    </td>\n                {/each}\n            </tr>\n        {/each}\n    </tbody>\n</table>\n\n{#if win != null}\n    <div transition:twirl=\"{{duration: 1000}}\">{win} win!</div>\n{:else}\n    <h3>Now: {turn}'s turn... </h3>\n{/if}\n\n<button on:click={() => backToHistory()}>Go back to previous step!</button>"
  ],
  "names": [],
  "mappings": "AA6EA,KAAK,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,eAAe,CAAE,QAAQ,CACzB,SAAS,CAAE,IAAI,AACf,CAAC,AACL,EAAE,cAAC,CAAC,AACA,MAAM,CAAE,GAAG,CAAC,KAAK,CACjB,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,AAChB,CAAC"
}